I"‰ñ<p>The traveling salesman problem (TSP) asks the following question: ‚ÄúGiven a list of n cities, among which an origin city, and the distances between each pair of cities, what is the shortest possible route that visits each city exactly once and returns to the origin city?‚Äù This is an important NP-hard combinatorial optimization problem, particularly in the fields of operations research and theoretical computer science. The problem was first formulated in 1930 and is one of the most intensively studied problems in discrete optimization. <br />
We are going to solve this problem using different approaches : in this post, we will use heuristics, and in an upcoming post we will improve our solutions using metaheuristics.</p>

<p><img src="img\posts\combinatorial1\tsp_img.png" alt="tsp_img.png" /></p>

<h2 id="1-exact-methods">1. Exact methods</h2>

<p>Many optimization problems can be solved by a linear programming approach, which is amazing because linear problems (LP) can be solved in a short amount of time, even for huge instances. And this is not limited to continuous variable problems : under mathematical conditions, we can perform a constraint relaxation and solve integer linear program (ILP) with for instance the simplex algorithm, and still obtain the optimal solution. 
<br />
Unfortunatly for us, altough the TSP problem does have a linear formulation, we can‚Äôt solve it optimally with a continuous constraint relaxation method.
<br />
And it is now that the real difficulties begin to appear, because the naive solution‚Äôs complexity is $O(n!)$ (that‚Äôs 77 years to solve an instance with 20 cities with a frequency of 1GHz). 
<br />
The DP (dynamic programming) version algorithm (Bellman-Held-Karp algorithm) will have the complexity of $O(2^n * n^2)$. By reducing the complexity from factorial to exponential, if the size of n is relatively small, the problem can be solvable (this time we can solve a 50 cities-sized instance in only 90 years‚Ä¶ maybe we can do better üòÖ).
<br />
So instead of searching an exact solution, we will try to find an approximate one in a much shorter timespan. I am talking about solving a instance with 400 cities in less than a minute. Yes, that‚Äôs quite the improvement !</p>

<h2 id="2-heuristics">2. Heuristics</h2>

<p>Heuristics are simple methods used to solve the problem. They are simple to understand, and produce an approximate solution in a really short time. In fact, even humans use heuristics for decision making in real life. We will study four of them : first fit, best fit, nearest point and a special ‚Äòcircle‚Äô heuristic. <br />
We will use a simple structure to represent our solutions : a list of length $n$ which stores the order in which we visit the different cities.</p>

<h3 id="helper-function">Helper function</h3>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">csv</span>
<span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="kn">import</span> <span class="nn">random</span>
<span class="kn">from</span> <span class="nn">math</span> <span class="kn">import</span> <span class="n">atan2</span>

<span class="k">def</span> <span class="nf">loadFixedInstance</span><span class="p">(</span><span class="n">fileName</span><span class="p">):</span>
    <span class="n">folderName</span> <span class="o">=</span> <span class="s">"Instances/"</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="s">".csv"</span> <span class="ow">in</span> <span class="n">fileName</span><span class="p">):</span>
        <span class="n">fileName</span> <span class="o">+=</span> <span class="s">".csv"</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="p">(</span><span class="n">folderName</span> <span class="ow">in</span> <span class="n">fileName</span><span class="p">):</span>
        <span class="n">fileName</span> <span class="o">=</span> <span class="n">folderName</span> <span class="o">+</span> <span class="n">fileName</span>
    <span class="k">with</span> <span class="nb">open</span><span class="p">(</span><span class="n">fileName</span><span class="p">)</span> <span class="k">as</span> <span class="nb">file</span><span class="p">:</span>
        <span class="n">lines</span> <span class="o">=</span> <span class="n">csv</span><span class="p">.</span><span class="n">reader</span><span class="p">(</span><span class="nb">file</span><span class="p">)</span>
        <span class="n">instance</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">lines</span><span class="p">:</span>
            <span class="n">instance</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">0</span><span class="p">]),</span> <span class="nb">int</span><span class="p">(</span><span class="n">line</span><span class="p">[</span><span class="mi">1</span><span class="p">])))</span>
    <span class="k">return</span> <span class="n">instance</span>

<span class="k">def</span> <span class="nf">computeDistanceBetweenCities</span><span class="p">(</span><span class="n">city1</span><span class="p">,</span> <span class="n">city2</span><span class="p">):</span>
    <span class="k">return</span> <span class="n">np</span><span class="p">.</span><span class="n">linalg</span><span class="p">.</span><span class="n">norm</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">city2</span><span class="p">)</span> <span class="o">-</span> <span class="n">np</span><span class="p">.</span><span class="n">array</span><span class="p">(</span><span class="n">city1</span><span class="p">),</span> <span class="nb">ord</span> <span class="o">=</span> <span class="mi">2</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">possiblePermutations</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span>
    <span class="n">perm</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">,</span><span class="n">n</span><span class="p">):</span>
            <span class="n">perm</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">))</span>
    <span class="k">return</span> <span class="n">perm</span>

<span class="k">def</span> <span class="nf">combinatorialConverter</span><span class="p">(</span><span class="n">x</span><span class="p">):</span>
    <span class="k">return</span> <span class="p">[</span><span class="n">elt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">elt</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)),</span><span class="n">x</span><span class="p">),</span> <span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">t</span><span class="p">:</span> <span class="n">t</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span> <span class="n">reverse</span><span class="o">=</span><span class="bp">False</span><span class="p">)]</span>

<span class="k">def</span> <span class="nf">distMatrix</span><span class="p">(</span><span class="n">cities</span><span class="p">):</span>
    <span class="n">M</span><span class="o">=</span><span class="p">[]</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">cities</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
        <span class="n">L</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">j</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">):</span>
            <span class="n">L</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">computeDistanceBetweenCities</span><span class="p">(</span><span class="n">cities</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">cities</span><span class="p">[</span><span class="n">j</span><span class="p">]))</span>
        <span class="n">M</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">L</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">M</span>

<span class="k">def</span> <span class="nf">fcomb</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="n">distMat</span><span class="p">):</span>
    <span class="n">routeDistance</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="n">routeDistance</span> <span class="o">+=</span> <span class="n">distMat</span><span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]][</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">]]</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">x</span><span class="p">)</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">routeDistance</span> <span class="o">+=</span> <span class="n">distMat</span><span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]][</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="o">+</span><span class="mi">1</span><span class="p">]]</span> 
    <span class="k">return</span> <span class="n">routeDistance</span>

<span class="k">def</span> <span class="nf">permuteElements</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">i</span><span class="p">,</span><span class="n">j</span><span class="p">,</span><span class="n">copy</span><span class="o">=</span><span class="bp">False</span><span class="p">):</span>
    <span class="k">if</span> <span class="n">copy</span> <span class="o">==</span> <span class="bp">True</span><span class="p">:</span>
        <span class="n">x_</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">x_</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">x_</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x_</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">x_</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
        <span class="k">return</span> <span class="n">x_</span>
    <span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">]</span> <span class="o">=</span> <span class="n">x</span><span class="p">[</span><span class="n">j</span><span class="p">],</span><span class="n">x</span><span class="p">[</span><span class="n">i</span><span class="p">]</span>
    <span class="k">return</span> <span class="n">x</span>

<span class="k">def</span> <span class="nf">plotRoute</span><span class="p">(</span><span class="n">route</span><span class="p">):</span>
    <span class="n">xs</span> <span class="o">=</span> <span class="p">[</span><span class="n">instance</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">route</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">instance</span><span class="p">[</span><span class="n">route</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">0</span><span class="p">]]</span>
    <span class="n">ys</span> <span class="o">=</span> <span class="p">[</span><span class="n">instance</span><span class="p">[</span><span class="n">i</span><span class="p">][</span><span class="mi">1</span><span class="p">]</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">route</span><span class="p">]</span> <span class="o">+</span> <span class="p">[</span><span class="n">instance</span><span class="p">[</span><span class="n">route</span><span class="p">[</span><span class="mi">0</span><span class="p">]][</span><span class="mi">1</span><span class="p">]]</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">plot</span><span class="p">(</span><span class="n">xs</span><span class="p">,</span> <span class="n">ys</span><span class="p">,</span> <span class="s">'o-'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">ylabel</span><span class="p">(</span><span class="s">'x'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">xlabel</span><span class="p">(</span><span class="s">'y'</span><span class="p">)</span>
    <span class="n">plt</span><span class="p">.</span><span class="n">show</span><span class="p">()</span>
</code></pre></div></div>

<p>We write some code that will be used by our algorithms :</p>
<ul>
  <li>a function to build a distance matrix between the cities</li>
  <li>an evaluation function to check solution quality</li>
  <li>a function to plot the results</li>
</ul>

<h2 id="hill-climbing">Hill climbing</h2>

<h2 id="first-fit">First Fit</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">stoch_descent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">permutations</span><span class="p">,</span><span class="n">distMat</span><span class="p">):</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">permutations</span><span class="p">)</span>
    <span class="n">si</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
    <span class="n">score</span> <span class="o">=</span> <span class="n">fcomb</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">distMat</span><span class="p">)</span>
    <span class="n">random</span><span class="p">.</span><span class="n">shuffle</span><span class="p">(</span><span class="n">si</span><span class="p">)</span>
    <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">while</span> <span class="n">i</span><span class="o">&lt;</span><span class="n">n</span><span class="p">:</span>
        <span class="n">x_</span> <span class="o">=</span> <span class="n">x</span><span class="p">.</span><span class="n">copy</span><span class="p">()</span>
        <span class="n">x_</span> <span class="o">=</span> <span class="n">permuteElements</span><span class="p">(</span><span class="n">x_</span><span class="p">,</span><span class="o">*</span><span class="n">permutations</span><span class="p">[</span><span class="n">si</span><span class="p">[</span><span class="n">i</span><span class="p">]])</span>
        <span class="n">i</span><span class="o">+=</span><span class="mi">1</span>
        <span class="n">score_</span> <span class="o">=</span> <span class="n">fcomb</span><span class="p">(</span><span class="n">x_</span><span class="p">,</span><span class="n">distMat</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">score_</span><span class="o">&lt;</span><span class="n">score</span><span class="p">:</span>
            <span class="n">improvement</span> <span class="o">=</span> <span class="bp">True</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">x_</span>
            <span class="n">score</span> <span class="o">=</span> <span class="n">score_</span>
            <span class="n">i</span> <span class="o">=</span> <span class="mi">0</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">,</span><span class="n">score</span>

<span class="n">instance</span> <span class="o">=</span> <span class="n">loadFixedInstance</span><span class="p">(</span><span class="s">"TSPInstance50.csv"</span><span class="p">)</span>
<span class="n">permutations</span> <span class="o">=</span> <span class="n">possiblePermutations</span><span class="p">([</span><span class="mi">0</span><span class="p">]</span><span class="o">*</span><span class="nb">len</span><span class="p">(</span><span class="n">instance</span><span class="p">))</span>
<span class="n">distMat</span> <span class="o">=</span> <span class="n">distMatrix</span><span class="p">(</span><span class="n">instance</span><span class="p">)</span>

<span class="n">initx</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">instance</span><span class="p">)))</span>
<span class="n">ptime</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">bestx</span><span class="p">,</span> <span class="n">bestScore</span> <span class="o">=</span> <span class="n">stoch_descent</span><span class="p">(</span><span class="n">initx</span><span class="p">,</span><span class="n">permutations</span><span class="p">,</span><span class="n">distMat</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Minimal cost found : </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">bestScore</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> in </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="n">ptime</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> s'</span><span class="p">)</span>
<span class="n">plotRoute</span><span class="p">(</span><span class="n">bestx</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minimal cost found : 1491.8 in 1.5 s
</code></pre></div></div>

<p><img src="img\posts\combinatorial1\output_11_1.png" alt="png" /></p>

<p>Here, we loop over every possible permutation that can be made after having shuffled the permutation list (result quality may vary). Every time we improve the solution, we start again from the beggining of the permutation list. If we loop through the entire loop without seing any improvement, the algorithm is terminated. <br />
With this algorithm, we can find a solution in one second, with a mean score of 1530 over 20 solutions. The best score was 1333 and the worst was 1815. Running the algorithm multiple times is a way to find a better quality solution.</p>

<h2 id="best-fit">Best Fit</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">complete_descent</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">permutations</span><span class="p">,</span><span class="n">distMat</span><span class="p">):</span>
    <span class="n">continueLoop</span> <span class="o">=</span> <span class="bp">True</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">permutations</span><span class="p">)</span>
    <span class="n">score</span> <span class="o">=</span> <span class="n">fcomb</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">distMat</span><span class="p">)</span>
    <span class="k">while</span> <span class="n">continueLoop</span><span class="p">:</span>
        <span class="n">scores</span> <span class="o">=</span> <span class="p">[</span><span class="n">fcomb</span><span class="p">(</span><span class="n">permuteElements</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="o">*</span><span class="n">permutations</span><span class="p">[</span><span class="n">i</span><span class="p">],</span><span class="n">copy</span><span class="o">=</span><span class="bp">True</span><span class="p">),</span><span class="n">distMat</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>
        <span class="n">bestidx</span> <span class="o">=</span> <span class="n">np</span><span class="p">.</span><span class="n">argmin</span><span class="p">(</span><span class="n">scores</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">scores</span><span class="p">[</span><span class="n">bestidx</span><span class="p">]</span><span class="o">&lt;</span><span class="n">score</span><span class="p">:</span>
            <span class="n">score</span> <span class="o">=</span> <span class="n">scores</span><span class="p">[</span><span class="n">bestidx</span><span class="p">]</span>
            <span class="n">x</span> <span class="o">=</span> <span class="n">permuteElements</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="o">*</span><span class="n">permutations</span><span class="p">[</span><span class="n">bestidx</span><span class="p">])</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="n">continueLoop</span> <span class="o">=</span> <span class="bp">False</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">score</span>

<span class="n">initx</span> <span class="o">=</span> <span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="nb">len</span><span class="p">(</span><span class="n">instance</span><span class="p">)))</span>
<span class="n">ptime</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">bestx</span><span class="p">,</span> <span class="n">bestScore</span> <span class="o">=</span> <span class="n">complete_descent</span><span class="p">(</span><span class="n">initx</span><span class="p">,</span><span class="n">permutations</span><span class="p">,</span><span class="n">distMat</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Minimal cost found : </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">bestScore</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> in </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="n">ptime</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> s'</span><span class="p">)</span>
<span class="n">plotRoute</span><span class="p">(</span><span class="n">bestx</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minimal cost found : 1589.5 in 2.8 s
</code></pre></div></div>

<p><img src="img\posts\combinatorial1\output_14_1.png" alt="png" /></p>

<p>This time, we solve the problem using a best fit approach. At each iteration, we choose the permutation which improves the solution the most, until we observe no further improvement. <br />
As expected, this algorithm is a little bit slower, and the end result is not particularly great‚Ä¶ maybe some randomness is neeeded üòÄ</p>

<h2 id="nearest-city">Nearest city</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">nearestHeuristic</span><span class="p">(</span><span class="n">dist_mat</span><span class="p">):</span>
    <span class="n">x</span> <span class="o">=</span> <span class="p">[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">n</span> <span class="o">=</span> <span class="nb">len</span><span class="p">(</span><span class="n">distMat</span><span class="p">)</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="o">-</span><span class="mi">1</span><span class="p">):</span>
        <span class="n">nextCities</span> <span class="o">=</span> <span class="p">[</span><span class="n">elt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="k">for</span> <span class="n">elt</span> <span class="ow">in</span> <span class="nb">sorted</span><span class="p">(</span><span class="nb">zip</span><span class="p">(</span><span class="nb">list</span><span class="p">(</span><span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)),</span><span class="n">dist_mat</span><span class="p">[</span><span class="n">x</span><span class="p">[</span><span class="o">-</span><span class="mi">1</span><span class="p">]]),</span> <span class="n">key</span> <span class="o">=</span> <span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span> <span class="k">if</span> <span class="n">elt</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="ow">not</span> <span class="ow">in</span> <span class="n">x</span><span class="p">]</span>
        <span class="n">x</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">nextCities</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="k">return</span> <span class="n">x</span><span class="p">,</span> <span class="n">fcomb</span><span class="p">(</span><span class="n">x</span><span class="p">,</span><span class="n">dist_mat</span><span class="p">)</span>

<span class="n">ptime</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">bestx</span><span class="p">,</span> <span class="n">bestScore</span> <span class="o">=</span> <span class="n">nearestHeuristic</span><span class="p">(</span><span class="n">distMat</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Minimal cost found : </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">bestScore</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> in </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="n">ptime</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s"> s'</span><span class="p">)</span>
<span class="n">plotRoute</span><span class="p">(</span><span class="n">bestx</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minimal cost found : 1351.3 in 0.006 s
</code></pre></div></div>

<p><img src="img\posts\combinatorial1\output_17_1.png" alt="png" /></p>

<p>Here we use a greedy algorithm by always choosing the nearest available city. This is much better than previous solutions : in only 6ms, the algorithm was able to find a solution that beats the previous ones ! But still we can observe some crossing, which means that the solution is still sub-optimal</p>

<h2 id="circle-heuristic">Circle heuristic</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">circleHeuristic</span><span class="p">(</span><span class="n">cities</span><span class="p">):</span>
    <span class="n">minx</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">cities</span><span class="p">,</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">maxx</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cities</span><span class="p">,</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">0</span><span class="p">])[</span><span class="mi">0</span><span class="p">]</span>
    <span class="n">miny</span> <span class="o">=</span> <span class="nb">min</span><span class="p">(</span><span class="n">cities</span><span class="p">,</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">maxy</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">cities</span><span class="p">,</span><span class="n">key</span><span class="o">=</span><span class="k">lambda</span> <span class="n">x</span><span class="p">:</span><span class="n">x</span><span class="p">[</span><span class="mi">1</span><span class="p">])[</span><span class="mi">1</span><span class="p">]</span>
    <span class="n">center</span> <span class="o">=</span> <span class="p">((</span><span class="n">minx</span><span class="o">+</span><span class="n">maxx</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">,(</span><span class="n">miny</span><span class="o">+</span><span class="n">maxy</span><span class="p">)</span><span class="o">/</span><span class="mi">2</span><span class="p">)</span>
    <span class="n">angles</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">for</span> <span class="n">city</span> <span class="ow">in</span> <span class="n">cities</span><span class="p">:</span>
        <span class="n">angles</span><span class="p">.</span><span class="n">append</span><span class="p">(</span><span class="n">atan2</span><span class="p">(</span><span class="n">city</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">-</span><span class="n">center</span><span class="p">[</span><span class="mi">1</span><span class="p">],</span><span class="n">city</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">-</span><span class="n">center</span><span class="p">[</span><span class="mi">0</span><span class="p">]))</span>
    <span class="k">return</span> <span class="n">combinatorialConverter</span><span class="p">(</span><span class="n">angles</span><span class="p">)</span>

<span class="n">ptime</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">bestx</span> <span class="o">=</span> <span class="n">circleHeuristic</span><span class="p">(</span><span class="n">instance</span><span class="p">)</span>
<span class="n">bestScore</span> <span class="o">=</span> <span class="n">fcomb</span><span class="p">(</span><span class="n">bestx</span><span class="p">,</span> <span class="n">distMat</span><span class="p">)</span>


<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Minimal cost found : </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">bestScore</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> in </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="n">ptime</span><span class="p">,</span><span class="mi">3</span><span class="p">)</span><span class="si">}</span><span class="s"> s'</span><span class="p">)</span>
<span class="n">plotRoute</span><span class="p">(</span><span class="n">bestx</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minimal cost found : 1667.6 in 0.001 s
</code></pre></div></div>

<p><img src="img\posts\combinatorial1\output_20_1.png" alt="png" /></p>

<p>This is once again a very interesting approach, here we project every city on a circle and then join them in a circular way</p>

<h2 id="can-we-do-better-">Can we do better ?</h2>

<p>We saw that using simple heuristics, we can find approximate solution to the TSP in a very short amount of time. However, the quality of the solutions is oftentimes disappointing. To find better solutions, we can do multiple things. Firstly, we can combine heuristics : For instance, we can build an initial solution with our circle heuristic, an then improve the solution with a first fit hill climbing algorithm.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">initx</span> <span class="o">=</span> <span class="n">circleHeuristic</span><span class="p">(</span><span class="n">instance</span><span class="p">)</span>
<span class="n">ptime</span> <span class="o">=</span> <span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span>
<span class="n">bestx</span><span class="p">,</span> <span class="n">bestScore</span> <span class="o">=</span> <span class="n">complete_descent</span><span class="p">(</span><span class="n">initx</span><span class="p">,</span><span class="n">permutations</span><span class="p">,</span><span class="n">distMat</span><span class="p">)</span>

<span class="k">print</span><span class="p">(</span><span class="sa">f</span><span class="s">'Minimal cost found : </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">bestScore</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> in </span><span class="si">{</span><span class="nb">round</span><span class="p">(</span><span class="n">time</span><span class="p">.</span><span class="n">time</span><span class="p">()</span><span class="o">-</span><span class="n">ptime</span><span class="p">,</span><span class="mi">1</span><span class="p">)</span><span class="si">}</span><span class="s"> s'</span><span class="p">)</span>
<span class="n">plotRoute</span><span class="p">(</span><span class="n">bestx</span><span class="p">)</span>
</code></pre></div></div>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Minimal cost found : 1329.7 in 1.1 s
</code></pre></div></div>

<p><img src="img\posts\combinatorial1\output_24_1.png" alt="png" /></p>

<p>Otherwise, we can use other approximate algorithms, such as the Lin-Kernighan algorithm (LK), which uses an operator called Œª-opt to modify the solution into a better one. Finally, in the next post we will implement an algorithm called Simulated Annealing, that is a type of metaheuristic algorithm.</p>

<p>Credits : Photo by Florian Olivo on <a href="https://https://unsplash.com/">Unsplash</a></p>
:ET